//  Owner: yanghao
syntax = "proto3";

option java_package = "com.tsingj.sloth.remoting.message";

enum RetCode {
    SUCCESS = 0;
    ERROR = 1;
}

//-----------------broker-----------------------
message Notify {

    enum Event {
        //广播ReBalance事件
        RE_BALANCE_BROADCAST = 0;
        //唤醒消费者
        CONSUMER_WEEK_UP = 1;
    }

    //weekup 指定topic partition消费者
    message TopicConsumerPartition {
        string group = 1;
        string topic = 2;
        int32 partition = 3;
    }

    //通知指定topicConsumer需要重新获取partition进行重平衡
    message TopicConsumer {
        string group = 1;
        string topic = 2;
        repeated int32 partitions = 3;
    }

    Event event = 1;

    oneof data {
        TopicConsumer topicConsumer = 2;
        TopicConsumerPartition topicConsumerPartition = 3;
    }

}

//-----------------consumer-----------------------

//-----------------consumerGroup client心跳-----------------------
message ConsumerHeartbeatRequest {
    string clientId = 1;
    string groupName = 2;
    string topic = 3;
}

message ConsumerHeartbeatResult {
    RetCode retCode = 1;
    string errorInfo = 2;
    repeated int32 partitions = 3;
}

//-----------------获取当前consumerGroupOffset-----------------------
message GetConsumerOffsetRequest {
    string groupName = 1;
    string topic = 2;
    int32 partition = 3;
}


message GetConsumerOffsetResult {
    RetCode retCode = 1;
    string errorInfo = 2;
    int64 offset = 3;
}

//-----------------提交consumerGroup offset请求-----------------------
message SubmitConsumerOffsetRequest {
    string groupName = 1;
    string topic = 2;
    int32 partition = 3;
    int64 offset = 4;
}

message SubmitConsumerOffsetResult {
    RetCode retCode = 1;
    string errorInfo = 2;
}

//-----------------producer-----------------------

message Message {
    string topic = 1;
    uint32 partition = 2;
    string request_id = 3;
    map<string, string> properties = 4;
    bytes body = 5; //业务侧消息体
    bool ack = 6; //是否需要ack 默认：true
}

message SendResult {
    enum RetCode {
        SUCCESS = 0;
        ERROR = 1;
        TIMEOUT = 2;
    }
    message ResultInfo {
        string topic = 1;
        uint32 partition = 2;
        int64 offset = 3;
    }
    RetCode retCode = 1;
    string errorInfo = 2;
    ResultInfo resultInfo = 3;
}

message GetMessageRequest {
    string topic = 1;
    uint32 partition = 2;
    int64 offset = 3;
}

message GetMessageResult {
    enum RetCode {
        FOUND = 0;
        NOT_FOUND = 1;
        //非异常类code
        ERROR = 2;
    }

    message Message {
        string topic = 1;
        uint32 partition = 2;
        map<string, string> properties = 3;
        bytes body = 4;
        int64 offset = 5;
        int64 storeTimestamp = 6;
        uint32 version = 7;
        int32 crc = 8;
    }
    RetCode retCode = 1;
    string errorInfo = 2;
    Message message = 3;

}

message GetOffsetRequest {
    string topic = 1;
    uint32 partition = 2;
}

message GetOffsetResult {
    RetCode retCode = 1;
    string errorInfo = 2;
    int64 offset = 3;
}


