//  Owner: yanghao
syntax = "proto3";

option java_package = "com.tsingj.sloth.broker.grpc.protobuf";

service Notification {

    //    rpc Poll (stream PollRequest) returns (stream PollResult) {}

    rpc Send (stream SendRequest) returns (stream SendResult) {
    }

    //    //集群内消息同步
    //    rpc MessageSync(stream MessageSyncRequest) returns (stream MessageSyncResult) {}

}

message Ping {
    string ping = 1;
}

message Pong {
    string pong = 1;
}

//message PollRequest {
//
//    enum PollRequestType {
//        CONSUMER_INFO = 0;
//        PING = 1;
//    }
//
//    message Ack {
//        string consumer_id = 1;     //消费者id,需要具备唯一性
//        string message_id = 2;      //消费到的消息id
//    }
//
//    message ConsumerInfo {
//        string consumer_id = 1;     //消费者id,需要具备唯一性
//        string consumer_group = 2;  //消费组
//        string topic = 3;         //订阅话题
//    }
//
//    PollRequestType request_type = 1; //消息类型
//
//    oneof message {
//        ConsumerInfo consumer_info = 2;
//        Ping ping = 3;
//        Ack ack = 4;
//    }
//
//}

//message PollResult {
//
//    enum PollResponseType {
//        PONG = 0;
//        MESSAGE = 1;
//    }
//
//    message Message{
//        string message_id = 1;
//        bytes data = 2;
//    }
//
//    PollResponseType response_type = 1;
//    oneof message {
//        Pong pong = 2;
//        Message msg = 3;
//    }
//}

message SendRequest {

    enum SendRequestType {
        MESSAGE = 0;
        PING = 1;
    }

    message Property {
        string key = 1;
        string value = 2;
    }

    message Message {
        string topic = 1;
        uint32 partition = 2;
        string request_id = 3;
        map<string, string> properties = 4;
        bytes body = 5; //业务侧消息体
        bool ack = 6; //是否需要ack 默认：true
    }

    SendRequestType request_type = 1; //消息类型

    oneof message {
        Message msg = 2;
        Ping ping = 3;
    }

}

message SendResult {

    enum SendResponseType {
        PONG = 0;
        ACK = 1;
    }

    message Ack {
        enum RetCode {
            SUCCESS = 0;
            ERROR = 1;
        }
        message ResultInfo {
            string topic = 1;
            uint32 partition = 2;
            int64 offset = 3;
        }
        string request_id = 1;
        RetCode retCode = 2;
        string info = 3;
        ResultInfo resultInfo = 4;
    }

    SendResponseType response_type = 1;
    oneof result {
        Pong pong = 2;
        Ack ack = 3;
    }

}

//message MessageSyncRequest {
//
//}
//
//message MessageSyncResult {
//
//}




